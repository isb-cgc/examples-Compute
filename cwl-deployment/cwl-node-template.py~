import yaml
import sys
#import subprocess

def GenerateStartupScript(path):
	script = open(path, 'r')
	script_contents = script.read()
	script.close()

	return script_contents

def GetLatestContainerImage(alias):
	find_images = subprocess.Popen(["gcloud", "compute", "images", "list", "--project", "google-containers"], stdout=subprocess.PIPE)
	filter_by_alias = subprocess.check_output(["grep", alias], stdin=find_images.stdout)
	container_image = filter_by_alias.split(' ')[0]

	return container_image

def GenerateConfig(context):
	resources_dict = {
		'resources': [
			{
				'name': '{name}'.format(name=context.env["name"]),
				'type': 'compute.v1.instance',
				'properties': {
					'metadata': {
						'items': [
							{
								'key': 'startup-script',
								'value': '{startupScript}'.format(startupScript=GenerateStartupScript(context.properties["startupScript"])),
							}
						]
					},
					'zone': '{zone}'.format(zone=context.properties["zone"]),
					'machineType': 'https://www.googleapis.com/compute/v1/projects/isb-cgc/zones/{zone}/machineTypes/{machineType}'.format(zone=context.properties["zone"], machineType=context.properties["machineType"]),
					'disks': [
						{
							'deviceName': 'boot',
							'type': 'PERSISTENT',
							'boot': True,
							'autoDelete': True,
							'initializeParams': {
								'sourceImage': 'https://www.googleapis.com/compute/v1/projects/google-containers/global/images/{containerImage}'.format(containerImage=context.properties["containerImageAlias"]),
								'diskSizeGb': '{diskSizeGb}'.format(diskSizeGb=context.properties["bootDiskSizeGb"]),
								'diskType':'https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/{bootDiskType}'.format(bootDiskType=context.properties['bootDiskType'])
							}
						}
					],
					'networkInterfaces': [
						{
							'network': 'https://www.googleapis.com/compute/v1/projects/{project}/global/networks/default'.format(project=context.env["project"]),
							'accessConfigs': [
								{
									'name': 'External NAT',
									'type': 'ONE_TO_ONE_NAT'
								}
							]
						}
					], 
					'serviceAccounts' : [
						{
							'scopes': [ "https://www.googleapis.com/auth/cloud-platform" ],
							'email': '{email}'.format(email=context.properties["serviceAcctEmail"])
						}
					]
				}
			}
		]
	}
	print yaml.dump(resources_dict)
	return yaml.dump(resources_dict)


def main():
	alias=sys.argv[1]
	containerImage=GetLatestContainerImage(alias)
	print containerImage

if __name__ == "__main__":
	main()
